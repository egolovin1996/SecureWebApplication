using System.Linq;
using Model.Vulnerability;
using Model.Vulnerability.Filters;
using Repository.Repositories.Base;
using Repository.Interfaces;
using System.Text;
using System.Linq.Dynamic.Core;

namespace Repository.Repositories
{
    public class VulnerabilityRepository : BaseRepository, IVulnerabilityRepository
    {
        public VulnerabilityRepository(string connectionString, IRepositoryContextFactory contextFactory) 
            : base(connectionString, contextFactory) { }

        public Result GetResult(FilterOptions options)
        {
            IQueryable<Vulnerability> vulResult = Context.Vulnerabilities;
            var emptyWhere = options.WhereFilters == null
                                    || options.WhereFilters.Count == 0;
            if (!emptyWhere){
                var whereString = new StringBuilder();
                var lastKey = options.WhereFilters.Last().PropertyName;
                foreach (var value in options.WhereFilters)
                {
                    whereString.Append($"{value.PropertyName}.Contains(\"{value.Value}\")");

                    if (value.PropertyName != lastKey)
                    {
                        whereString.Append(" and ");
                    }  
                }

                vulResult = vulResult.Where(whereString.ToString());
            }

            var totalCount = vulResult.Count();
            var vulnerabilities = vulResult.Skip(options.Skip)
                                           .Take(options.Take)
                                           .OrderBy(string.IsNullOrEmpty(options.OrderBy)
                                           ? "Id"
                                           : options.OrderBy);
            var result = new Result()
            {
                Vulnerabilities = vulnerabilities.ToList(),
                TotalCount = totalCount
            };

            return result;
        }
    }
}
